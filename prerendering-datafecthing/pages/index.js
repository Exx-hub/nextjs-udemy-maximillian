// import path from "path";
// import fs from "fs/promises";

import Link from "next/link";

export default function Home(props) {
  const { products } = props;

  return (
    <ul>
      {products.map((item) => (
        <li key={item.id}>
          <Link href={`/${item.id}`}>
            <a>{item.title}</a>
          </Link>
        </li>
      ))}
    </ul>
  );
}

export const getStaticProps = async (context) => {
  // console.log(context);
  console.log("GETSTATICPROPS");

  // example of using node code in here
  // const filePath = path.join(process.cwd(), "data", "dummy-backend.json");
  // const jsonData = await fs.readFile(filePath);
  // const data = JSON.parse(jsonData);

  // sample fetching of data from api but here we're using json-server fake rest api
  const response = await fetch("http://localhost:4000/products");
  const data = await response.json();

  if (!data) {
    return {
      redirect: {
        destination: "/about",
      },
    };
  }

  if (data.length < 1) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      products: data,
    },
    // revalidate: 10,
  };
};

// 1st getStaticProps is executed, which prepares the props for the component.
// then component function is executed using the props which was generated by getStaticProps

// INCREMENTAL STATIC REGENERATION (ISR)
// serves pre-rendered pages but has the functionality to regenerate the page depending on revalidate value (seconds)
// this solves stale data issue. regeneration occurs when a request is made after the elapsed revalidate time.

// CONTEXT prop in getStaticProps
